#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100
typedef struct Submission {
    int studentID;
    char assignmentTitle[MAX];
    char submissionDate[MAX];
    char status[10]; 
    struct Submission* next;
} Submission;
Submission* head = NULL;
Submission* createSubmission(int id, char title[], char date[], char status[]) {
    Submission* newNode = (Submission*)malloc(sizeof(Submission));
    newNode->studentID = id;
    strcpy(newNode->assignmentTitle, title);
    strcpy(newNode->submissionDate, date);
    strcpy(newNode->status, status);
    newNode->next = NULL;
    return newNode;
}
void addSubmission() {
    int id;
    char title[MAX], date[MAX], status[10];
    printf("Enter Student ID: ");
    scanf("%d", &id);
    getchar(); 
    printf("Enter Assignment Title: ");
    fgets(title, MAX, stdin);
    title[strcspn(title, "\n")] = '\0'; 
    printf("Enter Submission Date (YYYY-MM-DD): ");
    fgets(date, MAX, stdin);
    date[strcspn(date, "\n")] = '\0';
    printf("Enter Status (Submitted/Pending): ");
    scanf("%s", status);
    Submission* newSubmission = createSubmission(id, title, date, status);
    if (head == NULL) {
        head = newSubmission;
    } else {
        Submission* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newSubmission;
    }
    printf("Submission added successfully!\n");
}
void updateStatus() {
    int id;
    char title[MAX], newStatus[10];
    printf("Enter Student ID to update: ");
    scanf("%d", &id);
    getchar(); 
    printf("Enter Assignment Title: ");
    fgets(title, MAX, stdin);
    title[strcspn(title, "\n")] = '\0';
    Submission* temp = head;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->assignmentTitle, title) == 0) {
            printf("Enter new status (Submitted/Pending): ");
            scanf("%s", newStatus);
            strcpy(temp->status, newStatus);
            printf("Status updated successfully!\n");
            return;
        }
        temp = temp->next;
    }

    printf("Record not found.\n");
}
void searchByStudentID() {
    int id;
    printf("Enter Student ID to search: ");
    scanf("%d", &id);
    Submission* temp = head;
    int found = 0;
    while (temp != NULL) {
        if (temp->studentID == id) {
            printf("\nAssignment Title: %s\n", temp->assignmentTitle);
            printf("Submission Date: %s\n", temp->submissionDate);
            printf("Status: %s\n", temp->status);
            printf("-------------------------\n");
            found = 1;
        }
        temp = temp->next;
    }
    if (!found)
        printf("No submissions found for Student ID %d\n", id);
}
void displayAll() {
    if (head == NULL) {
        printf("No submissions to display.\n");
        return;
    }
    Submission* temp = head;
    printf("\n--- All Submissions ---\n");
    while (temp != NULL) {
        printf("Student ID: %d\n", temp->studentID);
        printf("Assignment Title: %s\n", temp->assignmentTitle);
        printf("Submission Date: %s\n", temp->submissionDate);
        printf("Status: %s\n", temp->status);
        printf("-------------------------\n");
        temp = temp->next;
    }
}
int main() {
    int choice;

    do {
        printf("\n--- Student Assignment Submission Tracker ---\n");
        printf("1. Add Submission\n");
        printf("2. Update Status\n");
        printf("3. Search by Student ID\n");
        printf("4. Display All Records\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); 

        switch (choice) {
            case 1:
                addSubmission();
                break;
            case 2:
                updateStatus();
                break;
            case 3:
                searchByStudentID();
                break;
            case 4:
                displayAll();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 5);
    return 0;
}
